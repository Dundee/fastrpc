#!/bin/bash
#
# FILE              $Id: make.sh,v 1.7 2011-02-23 14:04:06 volca Exp $
#
# DESCRIPTION       Packager for python Fastrpc module.
#
# AUTHOR            Miroslav Talasek <miroslav.talasek@firma.seznam.cz>
#
# Copyright (c) 2004 Seznam.cz, a.s.
# All Rights Reserved.
#
# HISTORY
#       2005-03-09  (miro)
#                   Created.
#

# Stop on errors
set -e

# Only lenny and older are supported
DEB_MAJOR="`cat /etc/debian_version | cut -d . -f 1`"

if [ "$DEB_MAJOR" -ge "6" ]; then
    # On squeeze we're on different package name scheme (and we're also packing
    # multiple versions of the module - for each python version we have)
    echo "Can't proceed: make.sh is intended for Debian Lenny and older"
    echo "Please use dpkg-buildpackage on Debian Squeeze and newer"
    exit 1
fi

# project name
PROJECT_NAME="fastrpc"

# Maintainer of this module
MAINTAINER="Miroslav Talasek <miroslav.talasek@firma.seznam.cz>"

DEFAULT=no
PYTHON=python

########################################################################
# Command line options.                                                #
########################################################################
while [ "$#" != "0" ]; do
    case "$1" in
        --help)
            echo "Usage: make.sh [--with-python=PYTHON] [--debug] [--help]"
            echo "    --with-python PYTHON"
            echo "    --with-python=PYTHON sets python interpreter for which to build package"
            echo "                         (defaults to 'python')"
            echo "    --default            create empty package for default python"
            echo "    --debug              log every command to stderr (set -x)"
            echo "    --help               show this help"
            echo ""
            echo "    When --default is specified, program creates python-fastrpc package"
            echo "    which depends on python with current version in debian. When "
            echo "    not specified, program creates python<minor>.<major>-fastrpc package"
            echo "    which depends on python<minor>.<major>"
            echo ""
            echo "    To change package's version please use dch in the parent directory"
            echo "    Control file is generated by expanding <tags> in the fastrpc.control"
            echo "    file."
            echo ""
            echo "    You can also create fastrpc.postinst, fastrpc.preinst, fastrpc.conffiles,"
            echo "    fastrpc.prerm and fastrpc.postrm files that would be used as postinst,"
            echo "    preinst, conffiles, prerm and postrm files in the package."
            exit 0
        ;;

        --with-python=*)
            PYTHON=${1:14}
        ;;

        --with-python)
            PYTHON=$2
            shift
        ;;
        
        --make-pkg)
            MODE="pkg"
        ;;

        --default)
            PYTHON=python
            DEFAULT=yes
        ;;

        --debug)
            set -x
            DEBUG="debug"
        ;;

        *)
            echo "Unknown option '$1', try make.sh --help." >> /dev/stderr
            exit 1
        ;;
    esac
    shift
done

function make_packages {

        # Check for debug.
        test -n "${DEBUG}" && set -x

        # Check for mandatory environmental variables.
        if test -z "${PACKAGE_NAME}"; then
                echo "Do not run directly! Use make.sh script instead." > /dev/stderr
                exit 1
        fi

        ########################################################################
        # Packaging                                                            #
        ########################################################################

        # Create package destination directory.
        PACKAGE_DIR=pkg
        mkdir -p ${PACKAGE_DIR}

        # Create build directory (force it to be clean).
        BUILD_DIR=build
        mkdir -p ${BUILD_DIR}
        rm -Rf ${BUILD_DIR}

        # Create directories and set their attributes.
        DEBIAN_BASE=${BUILD_DIR}/${PACKAGE_NAME}
        CONTROL_DIR=${DEBIAN_BASE}/DEBIAN
        mkdir -p ${CONTROL_DIR}
        chmod 0755 ${CONTROL_DIR}

        ########################################################################
        # Copy all files                                                       #
        ########################################################################

        if [ "${DEFAULT}" = "no" ]; then
                # copy all to the package
                cp -vR ${INSTALL_DIR}/* ${DEBIAN_BASE}/ || exit 1
        fi

        ########################################################################
        # Package housekeeping                                                 #
        ########################################################################

        if [ "${DEFAULT}" = "no" ]; then
            # Copy extra package files.
            for FILE in postinst preinst conffiles prerm postrm; do
                test -f ${PROJECT_NAME}.${FILE} \
                    && cp ${PROJECT_NAME}.${FILE} ${CONTROL_DIR}/${FILE}
            done

            # Remove any lost CVS entries in the package tree.
            find ${DEBIAN_BASE} -path "*CVS*" -exec rm -Rf '{}' \; || exit 1

            # build extra depend
            if grep -q "use Dpkg::Control" "`which dpkg-shlibdeps`" ; then
                SH_DEPEND=$(buildDepends $(find ${INSTALL_DIR} -name "*.so"))
            else
                SH_DEPEND=$(dpkg-shlibdeps -O $(find ${INSTALL_DIR} -name "*.so") | \
                    gawk '{match($0, /^.*Depends=(.*)$/, a); print a[1]}')
            fi
            PYTHON_PACKAGE="${PYTHON_PACKAGE}, ${SH_DEPEND}"
        fi

        # Compute package's size.
        SIZEDU=$(du -sk ${DEBIAN_BASE} | awk '{ print $1}') || exit 1
        SIZEDIR=$(find ${DEBIAN_BASE} -type d | wc | awk '{print $1}') || exit 1
        SIZE=$[ $SIZEDU - $SIZEDIR ] || exit 1

        # Process control file -- all <tags> will be replaced with
        # appropriate data.
        sed     -e "s/<VERSION>/${VERSION}/" \
                -e "s/<PACKAGE>/${PACKAGE_NAME}/" \
                -e "s/<MAINTAINER>/${MAINTAINER}/" \
                -e "s/<ARCHITECTURE>/$(dpkg --print-architecture)/" \
                -e "s/<SIZE>/$SIZE/" \
                -e "s/<PYTHON_PACKAGE>/${PYTHON_PACKAGE}/" \
                ${PROJECT_NAME}.control > build/${PACKAGE_NAME}/DEBIAN/control || exit 1

        if [ "${DEFAULT}" = "yes" ]; then
                # Notice that this package is default empty one
                echo -ne " .\n Default empty package which depends on current python module.\n" \
                 >> build/${PACKAGE_NAME}/DEBIAN/control
        fi

        # Create and rename the package.
        dpkg --build ${DEBIAN_BASE} ${PACKAGE_DIR}/${PACKAGE_NAME}.deb || exit 1
        dpkg-name -o ${PACKAGE_DIR}/${PACKAGE_NAME}.deb || exit 1


        ########################################################################
        # Cleanup                                                              #
        ########################################################################

        # Get rid of temporary build directory.
        rm -r ${BUILD_DIR}
}

function buildDepends() {

    function listPackages() {
        (
            for x in $*; do
                for a in `ldd "$x" | cut -f 2- -d"/" | cut -f 1 -d"("`; do
                    echo "$(dpkg -S "`readlink -f "/$a"`" | cut -f 1 -d:)"
                done
            done
        ) | sort -u
    }

    function depends() {
        (
            for a in `listPackages $*`; do
                if [ -f "/var/lib/dpkg/info/$a.shlibs" ]; then
                    cat "/var/lib/dpkg/info/$a.shlibs" | grep -v "^[^:]*: " | grep " $a " \
                        | cut -f 3- -d" " | sed "s/\(.*\)/\1, /g"
                fi
            done
        ) | sort -u
    }

    depends $* | tr -d "\n" | sed "s/,\s*$//g"
    echo
}


# determine operation
if test "${MODE}" = "pkg"; then
    
    make_packages || exit 1    

    exit $?
fi



########################################################################
# Retrieve information from the Python packages setup.py.              #
########################################################################

VERSION="`dpkg-parsechangelog -lchangelog | sed -rne 's,^Version: ([^-]+).*,\1,p'`"

# Run Python interpreter to obtain its version and construct
# package name from it.
PYTHON_VERSION=$(${PYTHON} <<EOF
import sys
print sys.version[:3]
EOF) || exit 1

# get version of next python (<major>.<minor + 1>)
if [ "${DEFAULT}" == "yes" ]; then
    NEXT_PYTHON_VERSION=$(${PYTHON} <<EOF
import sys
major = int(sys.version[0])
minor = int(sys.version[2])
print "%d.%d" % (major, minor + 1)
EOF) || exit 1

    PACKAGE_NAME="python-${PROJECT_NAME}"
    PYTHON_PACKAGE="python (>= ${PYTHON_VERSION}), python (<< ${NEXT_PYTHON_VERSION})"
    PYTHON_PACKAGE="${PYTHON_PACKAGE}, python${PYTHON_VERSION}-${PROJECT_NAME}"

    # Inform about package name.
    echo "Building empty package (${PACKAGE_NAME}) for default python. Python interpreter reset to python."
else
    PACKAGE_NAME="python${PYTHON_VERSION}-${PROJECT_NAME}"
    PYTHON_PACKAGE="python${PYTHON_VERSION}"

    # Inform about package name.
    echo "Building package ${PACKAGE_NAME}."
fi


########################################################################
# Build and install.                                                   #
########################################################################

INSTALL_DIR=$(pwd)/"install"
rm -Rf ${INSTALL_DIR}
mkdir -p ${INSTALL_DIR}

# Build and install module in the subshell.
if [ "${DEFAULT}" = "no" ]; then
    (
        # go to the setup.py's directory (is must be run from its
        # own directory) 
        cd ..;
        # clean all residuals from previous run
        ${PYTHON} setup.py clean --quiet --all
        # build and install everything
        ${PYTHON} setup.py install --quiet --root=${INSTALL_DIR}
    ) || exit 1
fi

########################################################################
# Packaging                                                            #
########################################################################

# Export variables needed for packager.
export PROJECT_NAME
export MAINTAINER
export INSTALL_DIR
export PACKAGE_NAME
export PYTHON_PACKAGE
export DEFAULT
export DEBUG
export VERSION

# Call packager under fakeroot.
fakeroot ./make.sh --make-pkg


########################################################################
# Cleanup                                                              #
########################################################################

# Get rid of residuals
rm -Rf ${INSTALL_DIR}
